= Catalogillo
High performance catalogs page engine for ruby on rails, it uses solr to power all catalog pages and no database is needed,
you can index new data using services, add new products, categories and dynamic categories (searches) and this engine will take care
of render catalogs with ultra high performance.

== Build status
{<img src="https://travis-ci.org/softr8/catalogillo.png" />}[https://travis-ci.org/softr8/catalogillo]

== Ruby on Rails Engine
Mount this engine in your rails app, customize your layout and index products and launch it to tons of users!

== Schema

  Product
    id: Product unique identifier
    name: Product Name
    category_ids: Category Ids (Array)
    price: Product Price
    sale_price: Product Sale Price
    on_sale: Product Sale Price active?
    version: Current Product Version, expires cache when changed
    images: Product images (Array)
    high_res_images: Product images (Array)
    fulltext_keywords: Product description to be used in searches
    pdp_url: Product detail page url

  Dynamic Category
    id: Dynamic Category unique identifier
    name: Dynamic Category name
    slug: Dynamic Category slug's name
    search_query: Search Query (Hash)
    sorting_options: Sorting options to display (Hash)
    version: Current Dynamic Category Version, expires cache when changed

== Indexing new products
You can send updates to this rails app from your main ecomm app via API, the endpoints are:

  POST   /namespace/api/v1/products/index(.:format)
  DELETE /namespace/api/v1/products/destroy/:id(.:format)
  POST   /namespace/api/v1/dynamic_categories/index(.:format)


== Categories
Creating categories with dynamic content is as easy as use solr query language, it's stored in json format then decoded and
catalogillo applies the filters to get the desired results.
Examples:

  {
    category_ids: {between: 1006..1007},
    name: {starting_with: "sale"}
  }

  {
    price: {greater_than: 50}
  }


This filters are going to return all products that the name starts with sale and the category_ids are between those ids,
remember that category_ids is a multi-value field and solr filters the correct data out of the box, it's very easy to assign
multiple categories to a single product. More info here in [Sunspot](https://github.com/sunspot/sunspot/wiki/Scoping-by-attribute-fields) documentation.

== Usage
Install this gem into a rails application and do not use active record and mount the engine in your desired namespace

  $ rails new supper_app --skip-active-record --skip-test-unit

  #Gemfile
  gem 'catalogillo', github: '/softr8/catalogillo'

  #config/routes.rb
  mount Catalogillo::Engine => "/store"

Personalize your application layout and that's it! You can build some jsonp calls to your main ecomm to show shopping cart
status in the header, or hook with unobstrusive javascript to build a quicklook.

For some reason I haven't had time to look, you need to include in your gemfile kaminari gem.


== Config
You can control global configurations

  Catalogillo.config do |config|
    config.per_page = 10
    config.page = 1
    config.default_image = "http://cdn.super-domain.com/images/no-image.png"
    config.default_product_tile = {tag: "li", class: ""}
    config.default_products_container = {tag: "lu", class: "unstyled"}
  end


== Demo
If you want to have a look at it, you can launch the dummy app from spec's folder

  cd spec/dummy
  bundle
  be sunspot-solr start
  be rails c
    include './db/seed.rb'
    exit
  be rails s

== TODO
* Add security to API endpoints
* Even more caching layers
* Lazy loading Product Images


== About the author
I work at [Crowd Interactive](http://www.crowdint.com), it is a leading Ruby and Rails
consultancy firm based in Mexico currently doing business with startups in the
United States. We specialize in building and growing Rails applications, by increasing
your IT crew onsite or offsite. We pick our projects carefully, as we only work
with companies we believe in.

== License
This project uses MIT-LICENSE.
